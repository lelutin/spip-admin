#!/usr/bin/env php
<?php

require_once("utils.php");

define("USAGE", _translate(
"Usage: spip-admin <command> [-h|--help] [arguments ...]
       spip-admin (-h|--help)"
) );

define("DESCRIPTION", _translate(
"spip-admin is a command-line interface to the Spip CMS that aims to simplify
administration of sites using Spip.
"
) );

function main($argv) {
    if (count($argv) < 2) {
        $more_help = _translate(
            "Use option -h or --help to get a list of available commands\n"
        );

        print_help();
        print("\n");
        print($more_help);
        exit(ERR_TOO_FEW_ARGUMENTS);
    }

    $command = $argv[1];

    switch ($command) {
        case "-h":
        case "--help":
            print_help();
            print "\n";
            show_command_list();
            exit(0);
            break;
    }

    // Pop the script name an the command name
    $arguments = $argv;
    unset($arguments[0]);
    unset($arguments[1]);

    dispatch($command, $arguments);
}

/******************************************************************************
 * From here on, the fun begins. Below this comment are the definitions for all
 * functions that make this script work.
 *****************************************************************************/

define("COMMANDS_PATH", dirname(__FILE__). DIRECTORY_SEPARATOR. "commands");

// Return codes
define("ERR_TOO_FEW_ARGUMENTS", 1);
define("ERR_COMMAND_DIR_NOT_FOUND", 2);
define("ERR_UNEXISTANT_COMMAND", 3);

/**
 * Print the main help message
 *
 * @return void
 * @author Gabriel Filion
 **/
function print_help() {
    print(USAGE."\n\n".DESCRIPTION);
}

/**
 * Print the list of all available commands
 *
 * @return void
 * @author Me
 **/
function show_command_list() {
    try {
        $commands = get_command_list();
    }
    catch (FileNotFoundException $exc) {
        bail_out(
            "The commands directory was not found.",
            ERR_COMMAND_DIR_NOT_FOUND
        );
    }

    $msg = _translate("Here is a list of all available commands:"). "\n  ";
    $msg .= implode("\n  ", $commands);
    $msg .= "\n\n";

    print($msg);
}

/**
 * Call the requested command and pass options to it.
 *
 * @return void
 * @author Gabriel Filion
 **/
function dispatch($command, $arguments) {
    try {
        $commands = get_command_list();
    }
    catch (FileNotFoundException $exc) {
        bail_out(
            _translate("The commands directory was not found."),
            ERR_COMMAND_DIR_NOT_FOUND
        );
    }

    if ( ! in_array($command, $commands) ){
        $vals = array( "command" => $command, "prog" => basename(__FILE__) );
        $msg = _translate(
            "Invalid command \"%(command)s\". Use \"%(prog)s".
                " -h\" to see a list of available command names.",
            $vals
        );

        bail_out(
            $msg,
            ERR_UNEXISTANT_COMMAND
        );
    }

    $cmd_path = COMMANDS_PATH. DIRECTORY_SEPARATOR. $command;

    $path = realpath(__FILE__). PATH_SEPARATOR. get_include_path();
    $args = implode(" ", $arguments);

    passthru("php -d include_path=\"$path\" $cmd_path $args", $ret);

    exit($ret);
}

/**
 * Find all commands available and return an array of their names.
 *
 * Search through the subdirectory "commands" and get all the names. Scripts
 * should not have extensions on their name so that the user doesn't have to
 * use, say "cache.php" as a command name.
 *
 * @return array: list of script names
 * @throws FileNotFoundException: when the commands directory cannot be found
 * @author Gabriel Filion
 **/
function get_command_list() {
    $dir_handle = @opendir(COMMANDS_PATH);
    if ($dir_handle === false) {
        throw new FileNotFoundException(COMMANDS_PATH);
    }

    $scripts = array();

    while ($file = readdir($dir_handle)) {
        if ($file == "." or $file == "..") {
            continue;
        }
        $scripts[] = $file;
    }

    closedir($dir_handle);

    return $scripts;
}

/******************************************************************************
 * Exceptions
 *****************************************************************************/

class FileNotFoundException extends Exception {
    function __construct($file_name) {
        $vals = array( "file" => $file_name );
        $msg = _translate("File named \"%(file)s\" was not found.", $vals);
        parent::__construct($msg);
    }
}

/******************************************************************************
 * Script execution
 *****************************************************************************/

// Only run the code when called on the CLI _and_ when the file was called
// directly (i.e. not included). This makes testing the code easier.
if (PHP_SAPI == "cli" && __FILE__ == realpath( $_SERVER['SCRIPT_FILENAME'] )) {
    main($argv);
}

?>
